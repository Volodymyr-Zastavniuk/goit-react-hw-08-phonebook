{"version":3,"file":"static/js/908.7e5956f5.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","components/ContactList/ContactListItem/EditForm/EditForm.jsx","components/ContactList/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/Loader/Loader.js","components/Section/Section.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts, getContactsError, getIsLoading } from 'redux/selectors';\nimport { addContact } from 'redux/contacts/contacts.operations';\nimport './ContactForm.css';\n\nexport default function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const contactsError = useSelector(getContactsError);\n  const isLoading = useSelector(getIsLoading);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        console.log('No case for this event');\n    }\n  };\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    const normalizedName = name.toLowerCase().trim();\n    if (\n      contacts.find(contact => contact.name.toLowerCase() === normalizedName)\n    ) {\n      return alert(`${name} is already in contacts.`);\n    }\n\n    dispatch(addContact({ name, number }));\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleFormSubmit} className=\"contact__form\">\n      <label className=\"contact__label\">\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleInputChange}\n          className=\"contact__input\"\n          maxlength=\"32\"\n        />\n      </label>\n\n      <label className=\"contact__label\">\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleInputChange}\n          className=\"contact__input\"\n        />\n      </label>\n\n      <button\n        type=\"submit\"\n        className=\"contact__btn\"\n        disabled={contactsError || isLoading}\n      >\n        Add contact\n      </button>\n    </form>\n  );\n}\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContactsError, getIsLoading } from 'redux/selectors';\nimport { editContact } from 'redux/contacts/contacts.operations';\nimport './EditForm.css';\n\nexport default function EditForm({ contact, onSubmit }) {\n  const dispatch = useDispatch();\n  const contactsError = useSelector(getContactsError);\n  const isLoading = useSelector(getIsLoading);\n\n  const { id, name, number } = contact;\n\n  const [editedName, setEditedName] = useState(name);\n  const [editedNumber, setEditedNumber] = useState(number);\n\n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'editedName':\n        setEditedName(value);\n        break;\n      case 'editedNumber':\n        setEditedNumber(value);\n        break;\n      default:\n        console.log('No case for this event');\n    }\n  };\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    const contactToEdit = { id, name: editedName, number: editedNumber };\n    dispatch(editContact(contactToEdit));\n    onSubmit();\n  };\n\n  return (\n    <form onSubmit={handleFormSubmit} className=\"edit__form\">\n      <label className=\"edit__label\">\n        New name\n        <input\n          type=\"text\"\n          name=\"editedName\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={editedName}\n          onChange={handleInputChange}\n          className=\"edit__input\"\n          maxlength=\"32\"\n        />\n      </label>\n\n      <label className=\"edit__label\">\n        New number\n        <input\n          type=\"tel\"\n          name=\"editedNumber\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={editedNumber}\n          onChange={handleInputChange}\n          className=\"edit__input\"\n        />\n      </label>\n\n      <button\n        type=\"submit\"\n        className=\"edit__btn\"\n        disabled={contactsError || isLoading}\n      >\n        Save\n      </button>\n    </form>\n  );\n}\n\n// ContactListItem.propTypes = {\n//   contact: PropTypes.shape({\n//     id: PropTypes.string.isRequired,\n//     name: PropTypes.string.isRequired,\n//     number: PropTypes.string.isRequired,\n//   }),\n// };\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport './ContactListItem.css';\nimport { deleteContact } from 'redux/contacts/contacts.operations';\nimport { getIsLoading } from 'redux/selectors';\nimport EditForm from './EditForm/EditForm';\n\nconst ContactListItem = ({ contact }) => {\n  const { id, name, number } = contact;\n  const dispatch = useDispatch();\n  const [isEditOpen, setIsEditOpen] = useState(false);\n\n  const isLoading = useSelector(getIsLoading);\n\n  const handleEditClick = () => {\n    setIsEditOpen(prev => (prev = !prev));\n  };\n  return (\n    <li>\n      <div className=\"contact-list__item\">\n        <div className=\"contact-list__info\">\n          {name}: {number}\n          {isEditOpen && (\n            <EditForm contact={contact} onSubmit={handleEditClick} />\n          )}\n        </div>\n\n        <button\n          type=\"button\"\n          onClick={handleEditClick}\n          className=\"contact-list__btn\"\n          disabled={isLoading}\n        >\n          Edit\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => dispatch(deleteContact(id))}\n          className=\"contact-list__btn\"\n          disabled={isLoading}\n        >\n          Delete\n        </button>\n      </div>\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n};\n\nexport default ContactListItem;\n","import React from 'react';\nimport ContactListItem from './ContactListItem/ContactListItem';\nimport { useSelector } from 'react-redux';\nimport {\n  getContacts,\n  getFilterValue,\n  getIsLoading,\n  getIsRefreshing,\n} from 'redux/selectors';\nimport './ContactList.css';\n\nconst ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filterValue = useSelector(getFilterValue);\n  const isLoading = useSelector(getIsLoading);\n  const isRefreshing = useSelector(getIsRefreshing);\n\n  const getFilteredContacts = () => {\n    const normalizedFilter = filterValue.toLowerCase().trim();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n  const filteredContacts = getFilteredContacts();\n\n  return (\n    <>\n      {contacts.length === 0 && !isLoading && !isRefreshing && (\n        <p>Please add some contacts to the list</p>\n      )}\n\n      <ul className=\"contact-list\">\n        {filteredContacts.map(contact => {\n          return <ContactListItem key={contact.id} contact={contact} />;\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts, getFilterValue } from 'redux/selectors';\nimport { setFilterValue } from 'redux/filter.slice';\nimport './Filter.css';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(getFilterValue);\n  const contacts = useSelector(getContacts);\n\n  return (\n    <>\n      <label className=\"filter\">\n        Find contact by name\n        <input\n          disabled={contacts.length === 0}\n          type=\"text\"\n          name=\"filter\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={filterValue}\n          onChange={event =>\n            dispatch(setFilterValue(event.currentTarget.value))\n          }\n          className=\"filter__input\"\n          maxlength=\"16\"\n        />\n      </label>\n    </>\n  );\n};\n\nexport default Filter;\n","import { ThreeDots } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <ThreeDots\n      color=\"grey\"\n      wrapperStyle={{ position: 'absolute', left: '180px', top: '36px' }}\n    />\n  );\n};\n\nexport default Loader;\n","import React from 'react';\nimport './Section.css';\n\nconst Section = ({ children }) => {\n  return <section className=\"Section\">{children}</section>;\n};\n\nexport default Section;\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport Loader from 'components/Loader/Loader';\nimport Section from 'components/Section/Section';\nimport { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contacts.operations';\nimport { getContactsError, getIsLoading, getIsLoggedIn } from 'redux/selectors';\nimport './ContactPage.css';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const contactsError = useSelector(getContactsError);\n  const isLoading = useSelector(getIsLoading);\n  const isLoggedIn = useSelector(getIsLoggedIn);\n\n  useEffect(() => {\n    if (!isLoggedIn) {\n      return;\n    }\n    dispatch(fetchContacts());\n  }, [dispatch, isLoggedIn]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <div className=\"contactPage-wrapper\">\n        <Section>\n          <h2>Add new contact</h2>\n          <ContactForm />\n        </Section>\n        <Section>\n          {isLoading && <Loader />}\n          <h2>Contacts</h2>\n          <Filter />\n          {!contactsError && <ContactList />}\n        </Section>\n      </div>\n    </>\n  );\n}\n"],"names":["ContactForm","dispatch","useDispatch","contacts","useSelector","getContacts","contactsError","getContactsError","isLoading","getIsLoading","useState","name","setName","number","setNumber","handleInputChange","event","currentTarget","value","console","log","resetForm","onSubmit","preventDefault","normalizedName","toLowerCase","trim","find","contact","alert","addContact","className","type","pattern","title","required","onChange","maxlength","disabled","EditForm","id","editedName","setEditedName","editedNumber","setEditedNumber","contactToEdit","editContact","isEditOpen","setIsEditOpen","handleEditClick","prev","onClick","deleteContact","filterValue","getFilterValue","isRefreshing","getIsRefreshing","filteredContacts","normalizedFilter","filter","includes","getFilteredContacts","length","map","setFilterValue","color","wrapperStyle","position","left","top","children","ContactsPage","isLoggedIn","getIsLoggedIn","useEffect","fetchContacts","Helmet"],"sourceRoot":""}